<?php

namespace Mollie\Console\Commands;

use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

/**
 * Class GenerateCurrencyAmountMapCommand
 *
 * @package Mollie\Console\Commands
 */
class GenerateCurrencyAmountMapCommand extends Command
{
    const AUTOGENERATED_START_PLACEHOLDER = '/* <auto-generated> */';
    const AUTOGENERATED_END_PLACEHOLDER = '/* </auto-generated> */';
    const NEW_LINE_TEMPLATE = "\n    ";
    const CLASS_PATH = '/src/BusinessLogic/Http/DTO/Amount.php';
    const XML_MAP_URL = 'https://www.currency-iso.org/dam/downloads/lists/list_one.xml';

    /**
     * Configures the current command.
     */
    protected function configure()
    {
        $this->setName('generate-currency-amount-map')
            ->setDescription('Generates a mapping of all the currencies and their respective amount minor units');
    }

    /**
     * Executes the current command.
     *
     * @param InputInterface $input
     * @param OutputInterface $output
     *
     * @return int 0 if everything went fine, or an error code
     *
     * @see setCode()
     */
    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $output->writeln('Getting currency amount mappings');
        $mapping = $this->getMapping();

        $output->writeln(sprintf('Generating class'));
        $classContent = file_get_contents(getcwd() . self::CLASS_PATH);

        $classContent = $this->insertAutogeneratedCode(
            $classContent,
            $this->transformMapArray($mapping)
        );

        file_put_contents(getcwd() . self::CLASS_PATH, $classContent);

        $output->writeln(sprintf('Class successfully generated!'));

        return 0;
    }

    /**
     * Inserts autogenerated code in the generated class.
     *
     * @param string $classContent
     * @param string $code
     *
     * @return string
     */
    private function insertAutogeneratedCode($classContent, $code)
    {
        $pos = strpos($classContent, self::AUTOGENERATED_START_PLACEHOLDER);
        $start = $pos === false ? 0 : $pos + strlen(self::AUTOGENERATED_START_PLACEHOLDER);

        $pos = strpos($classContent, self::AUTOGENERATED_END_PLACEHOLDER, $start);
        $end = $pos === false ? strpos($classContent, self::NEW_LINE_TEMPLATE . '/**', $start) : $pos;

        return substr_replace($classContent, $code, $start, $end - $start);
    }

    private function getMapping()
    {
        $xmlCurrencies = simplexml_load_string(file_get_contents(self::XML_MAP_URL));

        $jsonCurrencies = json_encode($xmlCurrencies);
        $currencies = json_decode($jsonCurrencies, true);
        $mappings = array();

        foreach ($currencies['CcyTbl']['CcyNtry'] as $currency) {
            if (
                !empty($currency['Ccy'])
                && $currency['CcyMnrUnts'] !== 'N.A.'
                && $currency['CcyMnrUnts'] !== '2'
            ) {
                $mappings[$currency['Ccy']] = $currency['CcyMnrUnts'];
            }
        }

        return $mappings;
    }

    /**
     * Transforms mapping array to the string to be injected into the template file.
     *
     * @param array $map
     *
     * @return string
     */
    private function transformMapArray($map)
    {
        if (empty($map)) {
            return 'private static $map = array();';
        }

        $mapLines = array();
        foreach ($map as $key => $value) {
            $mapLines[] = "    '{$key}' => {$value},";
        }

        return implode(
            self::NEW_LINE_TEMPLATE,
            array(
                '',
                'private static $map = array(',
                implode(self::NEW_LINE_TEMPLATE, $mapLines),
                ");",
                '',
            )
        );
    }
}
